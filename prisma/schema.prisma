// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
 // User Info
 id Int @id @default(autoincrement())
 userName String @unique
 email String @unique
 gender String
 birth Int
 password String
 isDev Boolean @default(false)
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 // My
 profile String?
 description String?
 followers User[] @relation("Folllow Relation", references:[id])
 followings User[] @relation("Folllow Relation", references:[id])

 // Art
 arts Art[]
 artLikes ArtLike[]
 artQuestions ArtQuestion[]
 artAnswers ArtAnswer[]

 // Alarm
 alarms Alarm[]

 // Bid
 bids Bid[]

 // Post
 posts Post[]
 comments PostComment[]
 likes PostLike[]
 commentLikse PostCommentLike[]
}

model Art {
 // basic info
 id Int @id @default(autoincrement())
 user User @relation(fields: [userId], references: [id])
 userId Int
 title String
 WorkingStartYear Int?
 WorkingStartMonth Int?
 WorkingStartDay Int?
 WorkingEndYear Int?
 WorkingEndMonth Int?
 WorkingEndDay Int?
 explain String
 // Art Category
 category ArtCategory @relation(fields: [categoryId], references:[id])
 categoryId Int
 isSuccessed Boolean @default(false)
 // Successed Date
 // photos
 photos ArtPhoto[]
 // likes
 likes ArtLike[]
 // questions
 questions ArtQuestion[]
 answers ArtAnswer[]
 // bid
 bids Bid[]
 basePrice Int
 presentPrice Int
 minimumPrice Int?
 createdAt DateTime @default(now())
 updatedAt DateTime @default(now())
}

model ArtCategory {
 id Int @id @default(autoincrement())
 arts Art[]
 category String
}

model ArtPhoto {
 id Int @id @default(autoincrement())
 art Art @relation(fields: [artId], references:[id])
 artId Int
 imageUrl String
}

model ArtLike {
 id Int @id @default(autoincrement())
 art Art @relation( fields:[artId], references:[id])
 user User @relation( fields:[userId], references:[id] )
 artId Int
 userId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 @@unique([artId, userId])
}

model ArtQuestion{
 id Int @id @default(autoincrement())
 user User @relation(fields:[userId], references:[id])
 userId Int
 art Art @relation(fields:[artId], references:[id])
 artId Int
 question String
 isAnswered Boolean @default(false)
 answers ArtAnswer[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model ArtAnswer{
 id Int @id @default(autoincrement())
 user User @relation(fields:[userId], references:[id])
 userId Int
 art Art @relation(fields:[artId], references:[id])
 artId Int
 answer String
 question ArtQuestion @relation(fields:[questionId], references:[id])
 questionId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model Bid{
 id Int @id @default(autoincrement())
 user User @relation(fields:[userId], references:[id])
 userId Int
 art Art @relation(fields:[artId], references:[id])
 artId Int
 price Int
 createdAt DateTime @default(now())
 isSuccessed Boolean @default(false)
}

model Alarm{
 id Int @id @default(autoincrement())
 type String
 alarm String
 user User @relation(fields:[userId], references:[id])
 userId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model Banner {
 id Int @id @default(autoincrement())
 isActive Boolean @default(false)
 imageUrl String
 updatedAt DateTime @updatedAt
 createdAt DateTime @default(now())
}

model Content{
 id Int @id @default(autoincrement())
 title String
 category ContentCategory @relation(fields:[categoryId], references:[id])
 categoryId Int
 imageUrl String
 updatedAt DateTime @updatedAt
 createdAt DateTime @default(now())
}

model ContentCategory{
 id Int @id @default(autoincrement())
 category String
 contents Content[]
}


model PostCategory{
 id Int @id @default(autoincrement())
 category String
 posts Post[]
}
model Post{
 id Int @id @default(autoincrement())
 category PostCategory @relation(fields:[categoryId], references:[id])
 categoryId Int
 user User @relation(fields:[userId], references:[id])
 userId Int
 title String
 post String
 imageUrl String?
 comments PostComment[]
 likes PostLike[]
 commentLikes PostCommentLike[]
 images PostPhoto[]
 isHot Boolean @default(false)
 updatedAt DateTime @updatedAt
 createdAt DateTime @default(now())
}
model PostPhoto{
 id Int @id @default(autoincrement())
 post Post @relation(fields:[postId], references:[id])
 postId Int
 imageUrl String
}
model PostLike{
 id Int @id @default(autoincrement())
 user User @relation(fields:[userId], references:[id])
 userId Int
 post Post @relation(fields:[postId], references:[id])
 postId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 @@unique([postId, userId])
}

model PostComment{
 id Int @id @default(autoincrement())
 user User @relation(fields:[userId], references:[id])
 userId Int
 post Post @relation(fields:[postId], references:[id])
 postId Int
 comment String
 rootCommentId Int?
 updatedAt DateTime @updatedAt
 createdAt DateTime @default(now())
 likes PostCommentLike[]
}

model PostCommentLike{
 id Int @id @default(autoincrement())
 user User @relation(fields:[userId], references:[id])
 userId Int
 post Post @relation(fields:[postId], references:[id])
 postId Int
 comment PostComment @relation(fields:[commentId], references:[id])
 commentId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 @@unique([commentId, userId])
}
