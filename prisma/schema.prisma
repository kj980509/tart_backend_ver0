// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
 // User Info
 id Int @id @default(autoincrement())
 userName String @unique
 email String @unique
 gender String
 birth Int
 isDev Boolean @default(false)
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 // Community
 profile String?
 description String?
 followers User[] @relation("Folllow Relation", references:[id])
 followings User[] @relation("Folllow Relation", references:[id])


 // Art
 arts Art[]
 artLikes ArtLike[]

 // Feed
 feeds Feed[]
 feedLikes FeedLike[]
 feedComments FeedComment[]

 //Chating
 rooms Room[]
 messages Message[]

 // Alarm
 alarms Alarm[]

 // Bid
 bids Bid[]

}

model Art {
 // basic info
 id Int @id @default(autoincrement())
 user User @relation(fields: [userId], references: [id])
 userId Int
 title String
 StartWorkingYear Int
 StartWorkingMonth Int
 StartWorkingDay Int
 EndWorkingYear Int
 EndWorkingMonth Int
 EndWorkingDay Int
 categoryId Int
 isSuccessed Boolean @default(false)
 // Successed Date
 // photos
 photos ArtPhoto[]
 // likes
 likes ArtLike[]
 // rooms
 rooms Room[]
 // bid
 bids Bid[]
 basePrice Int
 presentPrice Int
 minimumPrice Int
 createdAt DateTime @default(now())
 updatedAt DateTime @default(now())
}

model Category {
 id Int @id @default(autoincrement())
 name String
}

model ArtPhoto {
 id Int @id @default(autoincrement())
 art Art @relation(fields: [artId], references:[id])
 artId Int
 imageUrl String
}

model ArtLike {
 id Int @id @default(autoincrement())
 art Art @relation( fields:[artId], references:[id])
 user User @relation( fields:[userId], references:[id] )
 artId Int
 userId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 @@unique([artId, userId])
}

model Feed {
 id Int @id @default(autoincrement())
 user User @relation(fields: [userId], references: [id])
 userId Int
 photos FeedPhoto[]
 description String?
 likes FeedLike[]
 comments FeedComment[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model FeedPhoto{
 id Int @id @default(autoincrement())
 feed Feed @relation( fields: [feedId], references:[id])
 feedId Int
 imageUrl String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model FeedLike{
 id Int @id @default(autoincrement())
 feed Feed @relation( fields: [feedId], references:[id])
 feedId Int
 user User @relation( fields: [userId], references:[id])
 userId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 @@unique([feedId,userId])
}

model FeedComment{
 id Int @id @default(autoincrement())
 feed Feed @relation( fields: [feedId], references:[id])
 feedId Int
 user User @relation( fields: [userId], references:[id])
 userId Int
 comment String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model Room{
 id Int @id @default(autoincrement())
 users User[]
 messages Message[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 art Art @relation(fields:[artId], references:[id])
 artId Int
}

model Message {
 id Int @id @default(autoincrement())
 message String
 user User @relation(fields:[userId], references:[id])
 userId Int
 room Room @relation(fields:[roomId], references:[id])
 roomId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model Bid{
 id Int @id @default(autoincrement())
 user User @relation(fields:[userId], references:[id])
 userId Int
 art Art @relation(fields:[artId], references:[id])
 artId Int
 price Int
 createdAt DateTime @default(now())
 isSuccessed Boolean @default(false)
}


model Alarm{
 id Int @id @default(autoincrement())
 type String
 alarm String
 user User @relation(fields:[userId], references:[id])
 userId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

