// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
 // User Info
 id Int @id @default(autoincrement())
 userName String @unique
 email String @unique
 gender String
 birth Int
 isDev Boolean @default(false)
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 // Profile
 profile String?
 description String?

 // Community
 photos CommunityPhoto[]
 likes CommunityLike[]
 comments Comment[]
 followers User[] @relation("Folllow Relation", references:[id])
 followings User[] @relation("Folllow Relation", references:[id])

 // chating
 rooms Room[]
 Message Message[]

 // Art
 arts Art[]
 artLikes ArtLike[]

 //banners
 banners Banner[]
 // to add: selling product, selling product images, loving product, search, bid participant, bid product photo, bid info
}

model Art {
 // basic info
 id Int @id @default(autoincrement())
 user User @relation(fields: [userId], references: [id])
 userId Int
 title String
 StartWorkingYear Int
 StartWorkingMonth Int
 StartWorkingDay Int
 EndWorkingYear Int
 EndWorkingMonth Int
 EndWorkingDay Int
 categoryId Int
 isSuccessed Boolean @default(false)
 // Successed Date
 // photos
 photos ArtPhoto[]
 // likes
 likes ArtLike[]
 createdAt DateTime @default(now())
 updatedAt DateTime @default(now())
}

model Category {
 id Int @id @default(autoincrement())
 name String
}

model ArtPhoto {
 id Int @id @default(autoincrement())
 art Art @relation(fields: [artId], references:[id])
 artId Int
 imageUrl String
}

model ArtLike {
 id Int @id @default(autoincrement())
 art Art @relation( fields:[artId], references:[id])
 user User @relation( fields:[userId], references:[id] )
 artId Int
 userId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 @@unique([artId, userId])
}

model CommunityPhoto {
 id Int @id @default(autoincrement())
 user User @relation(fields: [userId], references: [id])
 userId Int
 file String
 caption String?
 hashtags CommunityHashtag[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 likes CommunityLike[]
 comments Comment[]
}

model CommunityHashtag{
 id Int @id @default(autoincrement())
 hashtag String @unique
 photos CommunityPhoto[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model CommunityLike {
 id Int @id @default(autoincrement())
 photo CommunityPhoto @relation( fields:[photoId], references:[id])
 user User @relation( fields:[userId], references:[id] )
 photoId Int
 userId Int
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 @@unique([photoId, userId])
}

model Banner {
 id Int @id @default(autoincrement())
 user User @relation(fields: [userId], references: [id])
 userId Int
 file String
 isMine Boolean?
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model Comment {
 id Int @id @default(autoincrement())
 photo CommunityPhoto @relation( fields:[photoId], references:[id])
 user User @relation( fields:[userId], references:[id] )
 payload String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 userId Int
 photoId Int
}

model Room {
 id Int @id @default(autoincrement())
 users User[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 messages Message[]
}

model Message{
 id Int @id @default(autoincrement())
 payload String
 user User @relation( fields:[userId], references:[id]  )
 userId Int
 room Room @relation( fields:[roomId], references:[id] )
 roomId Int
 read Boolean @default(false)
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

